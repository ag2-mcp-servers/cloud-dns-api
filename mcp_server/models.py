# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T01:59:07+00:00

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional

from pydantic import BaseModel, Field


class Status(Enum):
    PENDING = 'PENDING'
    DONE = 'DONE'


class Algorithm(Enum):
    RSASHA1 = 'RSASHA1'
    RSASHA256 = 'RSASHA256'
    RSASHA512 = 'RSASHA512'
    ECDSAP256SHA256 = 'ECDSAP256SHA256'
    ECDSAP384SHA384 = 'ECDSAP384SHA384'


class Type(Enum):
    KEY_SIGNING = 'KEY_SIGNING'
    ZONE_SIGNING = 'ZONE_SIGNING'


class Type1(Enum):
    SHA1 = 'SHA1'
    SHA256 = 'SHA256'
    SHA384 = 'SHA384'


class DnsKeyDigest(BaseModel):
    digest: Optional[str] = Field(
        None,
        description='The base-16 encoded bytes of this digest. Suitable for use in a DS resource record.',
    )
    type: Optional[Type1] = Field(
        None, description='Specifies the algorithm used to calculate this digest.'
    )


class KeyType(Enum):
    KEY_SIGNING = 'KEY_SIGNING'
    ZONE_SIGNING = 'ZONE_SIGNING'


class DnsKeySpec(BaseModel):
    algorithm: Optional[Algorithm] = Field(
        None, description='String mnemonic specifying the DNSSEC algorithm of this key.'
    )
    keyLength: Optional[int] = Field(None, description='Length of the keys in bits.')
    keyType: Optional[KeyType] = Field(
        None,
        description='Specifies whether this is a key signing key (KSK) or a zone signing key (ZSK). Key signing keys have the Secure Entry Point flag set and, when active, are only used to sign resource record sets of type DNSKEY. Zone signing keys do not have the Secure Entry Point flag set and are used to sign all other types of resource record sets.',
    )
    kind: Optional[str] = 'dns#dnsKeySpec'


class Expr(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.',
    )
    expression: Optional[str] = Field(
        None,
        description='Textual representation of an expression in Common Expression Language syntax.',
    )
    location: Optional[str] = Field(
        None,
        description='Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.',
    )
    title: Optional[str] = Field(
        None,
        description='Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.',
    )


class LogType(Enum):
    LOG_TYPE_UNSPECIFIED = 'LOG_TYPE_UNSPECIFIED'
    ADMIN_READ = 'ADMIN_READ'
    DATA_WRITE = 'DATA_WRITE'
    DATA_READ = 'DATA_READ'


class GoogleIamV1AuditLogConfig(BaseModel):
    exemptedMembers: Optional[List[str]] = Field(
        None,
        description='Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.',
    )
    logType: Optional[LogType] = Field(
        None, description='The log type that this config enables.'
    )


class GoogleIamV1Binding(BaseModel):
    condition: Optional[Expr] = Field(
        None,
        description='The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )
    members: Optional[List[str]] = Field(
        None,
        description='Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.',
    )
    role: Optional[str] = Field(
        None,
        description='Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.',
    )


class GoogleIamV1GetPolicyOptions(BaseModel):
    requestedPolicyVersion: Optional[int] = Field(
        None,
        description='Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )


class GoogleIamV1TestIamPermissionsRequest(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).',
    )


class GoogleIamV1TestIamPermissionsResponse(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='A subset of `TestPermissionsRequest.permissions` that the caller is allowed.',
    )


class Visibility(Enum):
    PUBLIC = 'PUBLIC'
    PRIVATE = 'PRIVATE'


class ManagedZoneCloudLoggingConfig(BaseModel):
    enableLogging: Optional[bool] = Field(
        None,
        description='If set, enable query logging for this ManagedZone. False by default, making logging opt-in.',
    )
    kind: Optional[str] = 'dns#managedZoneCloudLoggingConfig'


class NonExistence(Enum):
    NSEC = 'NSEC'
    NSEC3 = 'NSEC3'


class State(Enum):
    OFF = 'OFF'
    ON = 'ON'
    TRANSFER = 'TRANSFER'


class ManagedZoneDnsSecConfig(BaseModel):
    defaultKeySpecs: Optional[List[DnsKeySpec]] = Field(
        None,
        description='Specifies parameters for generating initial DnsKeys for this ManagedZone. Can only be changed while the state is OFF.',
    )
    kind: Optional[str] = 'dns#managedZoneDnsSecConfig'
    nonExistence: Optional[NonExistence] = Field(
        None,
        description='Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF.',
    )
    state: Optional[State] = Field(
        None, description='Specifies whether DNSSEC is enabled, and what mode it is in.'
    )


class ForwardingPath(Enum):
    DEFAULT = 'DEFAULT'
    PRIVATE = 'PRIVATE'


class ManagedZoneForwardingConfigNameServerTarget(BaseModel):
    forwardingPath: Optional[ForwardingPath] = Field(
        None,
        description='Forwarding path for this NameServerTarget. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on IP address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.',
    )
    ipv4Address: Optional[str] = Field(
        None, description='IPv4 address of a target name server.'
    )
    ipv6Address: Optional[str] = Field(
        None,
        description='IPv6 address of a target name server. Does not accept both fields (ipv4 & ipv6) being populated. Public preview as of November 2022.',
    )
    kind: Optional[str] = 'dns#managedZoneForwardingConfigNameServerTarget'


class ManagedZonePeeringConfigTargetNetwork(BaseModel):
    deactivateTime: Optional[str] = Field(
        None,
        description='The time at which the zone was deactivated, in RFC 3339 date-time format. An empty string indicates that the peering connection is active. The producer network can deactivate a zone. The zone is automatically deactivated if the producer network that the zone targeted is deleted. Output only.',
    )
    kind: Optional[str] = 'dns#managedZonePeeringConfigTargetNetwork'
    networkUrl: Optional[str] = Field(
        None,
        description='The fully qualified URL of the VPC network to forward queries to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}',
    )


class ManagedZonePrivateVisibilityConfigGKECluster(BaseModel):
    gkeClusterName: Optional[str] = Field(
        None,
        description='The resource name of the cluster to bind this ManagedZone to. This should be specified in the format like: projects/*/locations/*/clusters/*. This is referenced from GKE projects.locations.clusters.get API: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/get',
    )
    kind: Optional[str] = 'dns#managedZonePrivateVisibilityConfigGKECluster'


class ManagedZonePrivateVisibilityConfigNetwork(BaseModel):
    kind: Optional[str] = 'dns#managedZonePrivateVisibilityConfigNetwork'
    networkUrl: Optional[str] = Field(
        None,
        description='The fully qualified URL of the VPC network to bind to. Format this URL like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}',
    )


class ManagedZoneReverseLookupConfig(BaseModel):
    kind: Optional[str] = 'dns#managedZoneReverseLookupConfig'


class ManagedZoneServiceDirectoryConfigNamespace(BaseModel):
    deletionTime: Optional[str] = Field(
        None,
        description='The time that the namespace backing this zone was deleted; an empty string if it still exists. This is in RFC3339 text format. Output only.',
    )
    kind: Optional[str] = 'dns#managedZoneServiceDirectoryConfigNamespace'
    namespaceUrl: Optional[str] = Field(
        None,
        description='The fully qualified URL of the namespace associated with the zone. Format must be https://servicedirectory.googleapis.com/v1/projects/{project}/locations/{location}/namespaces/{namespace}',
    )


class PolicyAlternativeNameServerConfigTargetNameServer(BaseModel):
    forwardingPath: Optional[ForwardingPath] = Field(
        None,
        description='Forwarding path for this TargetNameServer. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.',
    )
    ipv4Address: Optional[str] = Field(
        None, description='IPv4 address to forward queries to.'
    )
    ipv6Address: Optional[str] = Field(
        None,
        description='IPv6 address to forward to. Does not accept both fields (ipv4 & ipv6) being populated. Public preview as of November 2022.',
    )
    kind: Optional[str] = 'dns#policyAlternativeNameServerConfigTargetNameServer'


class PolicyNetwork(BaseModel):
    kind: Optional[str] = 'dns#policyNetwork'
    networkUrl: Optional[str] = Field(
        None,
        description='The fully qualified URL of the VPC network to bind to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}',
    )


class Quota(BaseModel):
    dnsKeysPerManagedZone: Optional[int] = Field(
        None, description='Maximum allowed number of DnsKeys per ManagedZone.'
    )
    gkeClustersPerManagedZone: Optional[int] = Field(
        None,
        description='Maximum allowed number of GKE clusters to which a privately scoped zone can be attached.',
    )
    gkeClustersPerPolicy: Optional[int] = Field(
        None, description='Maximum allowed number of GKE clusters per policy.'
    )
    gkeClustersPerResponsePolicy: Optional[int] = Field(
        None, description='Maximum allowed number of GKE clusters per response policy.'
    )
    itemsPerRoutingPolicy: Optional[int] = Field(
        None, description='Maximum allowed number of items per routing policy.'
    )
    kind: Optional[str] = 'dns#quota'
    managedZones: Optional[int] = Field(
        None, description='Maximum allowed number of managed zones in the project.'
    )
    managedZonesPerGkeCluster: Optional[int] = Field(
        None,
        description='Maximum allowed number of managed zones which can be attached to a GKE cluster.',
    )
    managedZonesPerNetwork: Optional[int] = Field(
        None,
        description='Maximum allowed number of managed zones which can be attached to a network.',
    )
    networksPerManagedZone: Optional[int] = Field(
        None,
        description='Maximum allowed number of networks to which a privately scoped zone can be attached.',
    )
    networksPerPolicy: Optional[int] = Field(
        None, description='Maximum allowed number of networks per policy.'
    )
    networksPerResponsePolicy: Optional[int] = Field(
        None, description='Maximum allowed number of networks per response policy.'
    )
    peeringZonesPerTargetNetwork: Optional[int] = Field(
        None,
        description='Maximum allowed number of consumer peering zones per target network owned by this producer project',
    )
    policies: Optional[int] = Field(
        None, description='Maximum allowed number of policies per project.'
    )
    resourceRecordsPerRrset: Optional[int] = Field(
        None,
        description='Maximum allowed number of ResourceRecords per ResourceRecordSet.',
    )
    responsePolicies: Optional[int] = Field(
        None, description='Maximum allowed number of response policies per project.'
    )
    responsePolicyRulesPerResponsePolicy: Optional[int] = Field(
        None, description='Maximum allowed number of rules per response policy.'
    )
    rrsetAdditionsPerChange: Optional[int] = Field(
        None,
        description='Maximum allowed number of ResourceRecordSets to add per ChangesCreateRequest.',
    )
    rrsetDeletionsPerChange: Optional[int] = Field(
        None,
        description='Maximum allowed number of ResourceRecordSets to delete per ChangesCreateRequest.',
    )
    rrsetsPerManagedZone: Optional[int] = Field(
        None,
        description='Maximum allowed number of ResourceRecordSets per zone in the project.',
    )
    targetNameServersPerManagedZone: Optional[int] = Field(
        None,
        description='Maximum allowed number of target name servers per managed forwarding zone.',
    )
    targetNameServersPerPolicy: Optional[int] = Field(
        None,
        description='Maximum allowed number of alternative target name servers per policy.',
    )
    totalRrdataSizePerChange: Optional[int] = Field(
        None,
        description='Maximum allowed size for total rrdata in one ChangesCreateRequest in bytes.',
    )
    whitelistedKeySpecs: Optional[List[DnsKeySpec]] = Field(
        None,
        description='DNSSEC algorithm and key length types that can be used for DnsKeys.',
    )


class IpProtocol(Enum):
    UNDEFINED = 'UNDEFINED'
    TCP = 'TCP'
    UDP = 'UDP'


class LoadBalancerType(Enum):
    NONE = 'NONE'
    REGIONAL_L4ILB = 'REGIONAL_L4ILB'


class RRSetRoutingPolicyLoadBalancerTarget(BaseModel):
    ipAddress: Optional[str] = Field(
        None,
        description='The frontend IP address of the Load Balancer to health check.',
    )
    ipProtocol: Optional[IpProtocol] = None
    kind: Optional[str] = 'dns#rRSetRoutingPolicyLoadBalancerTarget'
    loadBalancerType: Optional[LoadBalancerType] = Field(
        None,
        description="The type of Load Balancer specified by this target. Must match the configuration of the Load Balancer located at the LoadBalancerTarget's IP address/port and region.",
    )
    networkUrl: Optional[str] = Field(
        None,
        description='The fully qualified url of the network on which the ILB is present. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}',
    )
    port: Optional[str] = Field(
        None, description='The configured port of the Load Balancer.'
    )
    project: Optional[str] = Field(
        None, description='The project ID in which the ILB exists.'
    )
    region: Optional[str] = Field(
        None, description='The region in which the ILB exists.'
    )


class ResponseHeader(BaseModel):
    operationId: Optional[str] = Field(
        None,
        description='For mutating operation requests that completed successfully. This is the client_operation_id if the client specified it, otherwise it is generated by the server (output only).',
    )


class ResponsePolicyGKECluster(BaseModel):
    gkeClusterName: Optional[str] = Field(
        None,
        description='The resource name of the cluster to bind this response policy to. This should be specified in the format like: projects/*/locations/*/clusters/*. This is referenced from GKE projects.locations.clusters.get API: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/get',
    )
    kind: Optional[str] = 'dns#responsePolicyGKECluster'


class ResponsePolicyNetwork(BaseModel):
    kind: Optional[str] = 'dns#responsePolicyNetwork'
    networkUrl: Optional[str] = Field(
        None,
        description='The fully qualified URL of the VPC network to bind to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}',
    )


class Behavior(Enum):
    BEHAVIOR_UNSPECIFIED = 'BEHAVIOR_UNSPECIFIED'
    BYPASS_RESPONSE_POLICY = 'BYPASS_RESPONSE_POLICY'


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class SortBy(Enum):
    CHANGE_SEQUENCE = 'CHANGE_SEQUENCE'


class SortBy2(Enum):
    START_TIME = 'START_TIME'
    ID = 'ID'


class DnsKey(BaseModel):
    algorithm: Optional[Algorithm] = Field(
        None,
        description='String mnemonic specifying the DNSSEC algorithm of this key. Immutable after creation time.',
    )
    creationTime: Optional[str] = Field(
        None,
        description='The time that this resource was created in the control plane. This is in RFC3339 text format. Output only.',
    )
    description: Optional[str] = Field(
        None,
        description="A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the resource's function.",
    )
    digests: Optional[List[DnsKeyDigest]] = Field(
        None,
        description='Cryptographic hashes of the DNSKEY resource record associated with this DnsKey. These digests are needed to construct a DS record that points at this DNS key. Output only.',
    )
    id: Optional[str] = Field(
        None,
        description='Unique identifier for the resource; defined by the server (output only).',
    )
    isActive: Optional[bool] = Field(
        None,
        description='Active keys are used to sign subsequent changes to the ManagedZone. Inactive keys are still present as DNSKEY Resource Records for the use of resolvers validating existing signatures.',
    )
    keyLength: Optional[int] = Field(
        None,
        description='Length of the key in bits. Specified at creation time, and then immutable.',
    )
    keyTag: Optional[int] = Field(
        None,
        description="The key tag is a non-cryptographic hash of the a DNSKEY resource record associated with this DnsKey. The key tag can be used to identify a DNSKEY more quickly (but it is not a unique identifier). In particular, the key tag is used in a parent zone's DS record to point at the DNSKEY in this child ManagedZone. The key tag is a number in the range [0, 65535] and the algorithm to calculate it is specified in RFC4034 Appendix B. Output only.",
    )
    kind: Optional[str] = 'dns#dnsKey'
    publicKey: Optional[str] = Field(
        None, description='Base64 encoded public half of this key. Output only.'
    )
    type: Optional[Type] = Field(
        None,
        description='One of "KEY_SIGNING" or "ZONE_SIGNING". Keys of type KEY_SIGNING have the Secure Entry Point flag set and, when active, are used to sign only resource record sets of type DNSKEY. Otherwise, the Secure Entry Point flag is cleared, and this key is used to sign only resource record sets of other types. Immutable after creation time.',
    )


class DnsKeysListResponse(BaseModel):
    dnsKeys: Optional[List[DnsKey]] = Field(
        None, description='The requested resources.'
    )
    header: Optional[ResponseHeader] = None
    kind: Optional[str] = Field(
        'dns#dnsKeysListResponse', description='Type of resource.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value as your pagination token. In this way you can retrieve the complete contents of even very large collections one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. There is no way to retrieve a "snapshot" of collections larger than the maximum page size.',
    )


class GoogleIamV1AuditConfig(BaseModel):
    auditLogConfigs: Optional[List[GoogleIamV1AuditLogConfig]] = Field(
        None, description='The configuration for logging of each type of permission.'
    )
    service: Optional[str] = Field(
        None,
        description='Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.',
    )


class GoogleIamV1GetIamPolicyRequest(BaseModel):
    options: Optional[GoogleIamV1GetPolicyOptions] = Field(
        None,
        description='OPTIONAL: A `GetPolicyOptions` object for specifying options to `GetIamPolicy`.',
    )


class GoogleIamV1Policy(BaseModel):
    auditConfigs: Optional[List[GoogleIamV1AuditConfig]] = Field(
        None, description='Specifies cloud audit logging configuration for this policy.'
    )
    bindings: Optional[List[GoogleIamV1Binding]] = Field(
        None,
        description='Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.',
    )
    etag: Optional[str] = Field(
        None,
        description='`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.',
    )
    version: Optional[int] = Field(
        None,
        description='Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )


class GoogleIamV1SetIamPolicyRequest(BaseModel):
    policy: Optional[GoogleIamV1Policy] = Field(
        None,
        description='REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.',
    )
    updateMask: Optional[str] = Field(
        None,
        description='OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`',
    )


class ManagedZoneForwardingConfig(BaseModel):
    kind: Optional[str] = 'dns#managedZoneForwardingConfig'
    targetNameServers: Optional[List[ManagedZoneForwardingConfigNameServerTarget]] = (
        Field(
            None,
            description='List of target name servers to forward to. Cloud DNS selects the best available name server if more than one target is given.',
        )
    )


class ManagedZonePeeringConfig(BaseModel):
    kind: Optional[str] = 'dns#managedZonePeeringConfig'
    targetNetwork: Optional[ManagedZonePeeringConfigTargetNetwork] = Field(
        None, description='The network with which to peer.'
    )


class ManagedZonePrivateVisibilityConfig(BaseModel):
    gkeClusters: Optional[List[ManagedZonePrivateVisibilityConfigGKECluster]] = Field(
        None,
        description='The list of Google Kubernetes Engine clusters that can see this zone.',
    )
    kind: Optional[str] = 'dns#managedZonePrivateVisibilityConfig'
    networks: Optional[List[ManagedZonePrivateVisibilityConfigNetwork]] = Field(
        None, description='The list of VPC networks that can see this zone.'
    )


class ManagedZoneServiceDirectoryConfig(BaseModel):
    kind: Optional[str] = 'dns#managedZoneServiceDirectoryConfig'
    namespace: Optional[ManagedZoneServiceDirectoryConfigNamespace] = Field(
        None,
        description='Contains information about the namespace associated with the zone.',
    )


class OperationDnsKeyContext(BaseModel):
    newValue: Optional[DnsKey] = Field(
        None, description='The post-operation DnsKey resource.'
    )
    oldValue: Optional[DnsKey] = Field(
        None, description='The pre-operation DnsKey resource.'
    )


class PolicyAlternativeNameServerConfig(BaseModel):
    kind: Optional[str] = 'dns#policyAlternativeNameServerConfig'
    targetNameServers: Optional[
        List[PolicyAlternativeNameServerConfigTargetNameServer]
    ] = Field(
        None,
        description='Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not available when an alternative name server is specified.',
    )


class Project(BaseModel):
    id: Optional[str] = Field(
        None,
        description='User assigned unique identifier for the resource (output only).',
    )
    kind: Optional[str] = 'dns#project'
    number: Optional[str] = Field(
        None,
        description='Unique numeric identifier for the resource; defined by the server (output only).',
    )
    quota: Optional[Quota] = Field(
        None, description='Quotas assigned to this project (output only).'
    )


class RRSetRoutingPolicyHealthCheckTargets(BaseModel):
    internalLoadBalancers: Optional[List[RRSetRoutingPolicyLoadBalancerTarget]] = None


class RRSetRoutingPolicyWrrPolicyWrrPolicyItem(BaseModel):
    healthCheckedTargets: Optional[RRSetRoutingPolicyHealthCheckTargets] = Field(
        None,
        description="endpoints that need to be health checked before making the routing decision. The unhealthy endpoints will be omitted from the result. If all endpoints within a buckete are unhealthy, we'll choose a different bucket (sampled w.r.t. its weight) for responding. Note that if DNSSEC is enabled for this zone, only one of rrdata or health_checked_targets can be set.",
    )
    kind: Optional[str] = 'dns#rRSetRoutingPolicyWrrPolicyWrrPolicyItem'
    rrdatas: Optional[List[str]] = None
    signatureRrdatas: Optional[List[str]] = Field(
        None,
        description="DNSSEC generated signatures for all the rrdata within this item. Note that if health checked targets are provided for DNSSEC enabled zones, there's a restriction of 1 ip per item. .",
    )
    weight: Optional[float] = Field(
        None,
        description='The weight corresponding to this subset of rrdata. When multiple WeightedRoundRobinPolicyItems are configured, the probability of returning an rrset is proportional to its weight relative to the sum of weights configured for all items. This weight should be non-negative.',
    )


class ResponsePolicy(BaseModel):
    description: Optional[str] = Field(
        None, description='User-provided description for this Response Policy.'
    )
    gkeClusters: Optional[List[ResponsePolicyGKECluster]] = Field(
        None,
        description='The list of Google Kubernetes Engine clusters to which this response policy is applied.',
    )
    id: Optional[str] = Field(
        None,
        description='Unique identifier for the resource; defined by the server (output only).',
    )
    kind: Optional[str] = 'dns#responsePolicy'
    labels: Optional[Dict[str, str]] = Field(None, description='User labels.')
    networks: Optional[List[ResponsePolicyNetwork]] = Field(
        None,
        description='List of network names specifying networks to which this policy is applied.',
    )
    responsePolicyName: Optional[str] = Field(
        None, description='User assigned name for this Response Policy.'
    )


class ManagedZone(BaseModel):
    cloudLoggingConfig: Optional[ManagedZoneCloudLoggingConfig] = None
    creationTime: Optional[str] = Field(
        None,
        description='The time that this resource was created on the server. This is in RFC3339 text format. Output only.',
    )
    description: Optional[str] = Field(
        None,
        description="A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the managed zone's function.",
    )
    dnsName: Optional[str] = Field(
        None,
        description='The DNS name of this managed zone, for instance "example.com.".',
    )
    dnssecConfig: Optional[ManagedZoneDnsSecConfig] = Field(
        None, description='DNSSEC configuration.'
    )
    forwardingConfig: Optional[ManagedZoneForwardingConfig] = Field(
        None,
        description='The presence for this field indicates that outbound forwarding is enabled for this zone. The value of this field contains the set of destinations to forward to.',
    )
    id: Optional[str] = Field(
        None,
        description='Unique identifier for the resource; defined by the server (output only)',
    )
    kind: Optional[str] = 'dns#managedZone'
    labels: Optional[Dict[str, str]] = Field(None, description='User labels.')
    name: Optional[str] = Field(
        None,
        description='User assigned name for this resource. Must be unique within the project. The name must be 1-63 characters long, must begin with a letter, end with a letter or digit, and only contain lowercase letters, digits or dashes.',
    )
    nameServerSet: Optional[str] = Field(
        None,
        description='Optionally specifies the NameServerSet for this ManagedZone. A NameServerSet is a set of DNS name servers that all host the same ManagedZones. Most users leave this field unset. If you need to use this field, contact your account team.',
    )
    nameServers: Optional[List[str]] = Field(
        None,
        description='Delegate your managed_zone to these virtual name servers; defined by the server (output only)',
    )
    peeringConfig: Optional[ManagedZonePeeringConfig] = Field(
        None,
        description='The presence of this field indicates that DNS Peering is enabled for this zone. The value of this field contains the network to peer with.',
    )
    privateVisibilityConfig: Optional[ManagedZonePrivateVisibilityConfig] = Field(
        None,
        description='For privately visible zones, the set of Virtual Private Cloud resources that the zone is visible from.',
    )
    reverseLookupConfig: Optional[ManagedZoneReverseLookupConfig] = Field(
        None,
        description='The presence of this field indicates that this is a managed reverse lookup zone and Cloud DNS resolves reverse lookup queries using automatically configured records for VPC resources. This only applies to networks listed under private_visibility_config.',
    )
    serviceDirectoryConfig: Optional[ManagedZoneServiceDirectoryConfig] = Field(
        None,
        description='This field links to the associated service directory namespace. Do not set this field for public zones or forwarding zones.',
    )
    visibility: Optional[Visibility] = Field(
        None,
        description="The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources.",
    )


class ManagedZonesListResponse(BaseModel):
    header: Optional[ResponseHeader] = None
    kind: Optional[str] = Field(
        'dns#managedZonesListResponse', description='Type of resource.'
    )
    managedZones: Optional[List[ManagedZone]] = Field(
        None, description='The managed zone resources.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value as your page token. This lets you the complete contents of even very large collections one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. You cannot retrieve a consistent snapshot of a collection larger than the maximum page size.',
    )


class OperationManagedZoneContext(BaseModel):
    newValue: Optional[ManagedZone] = Field(
        None, description='The post-operation ManagedZone resource.'
    )
    oldValue: Optional[ManagedZone] = Field(
        None, description='The pre-operation ManagedZone resource.'
    )


class Policy(BaseModel):
    alternativeNameServerConfig: Optional[PolicyAlternativeNameServerConfig] = Field(
        None,
        description='Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not available when an alternative name server is specified.',
    )
    description: Optional[str] = Field(
        None,
        description="A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the policy's function.",
    )
    enableInboundForwarding: Optional[bool] = Field(
        None,
        description='Allows networks bound to this policy to receive DNS queries sent by VMs or applications over VPN connections. When enabled, a virtual IP address is allocated from each of the subnetworks that are bound to this policy.',
    )
    enableLogging: Optional[bool] = Field(
        None,
        description='Controls whether logging is enabled for the networks bound to this policy. Defaults to no logging if not set.',
    )
    id: Optional[str] = Field(
        None,
        description='Unique identifier for the resource; defined by the server (output only).',
    )
    kind: Optional[str] = 'dns#policy'
    name: Optional[str] = Field(None, description='User-assigned name for this policy.')
    networks: Optional[List[PolicyNetwork]] = Field(
        None,
        description='List of network names specifying networks to which this policy is applied.',
    )


class RRSetRoutingPolicyGeoPolicyGeoPolicyItem(BaseModel):
    healthCheckedTargets: Optional[RRSetRoutingPolicyHealthCheckTargets] = Field(
        None,
        description='For A and AAAA types only. Endpoints to return in the query result only if they are healthy. These can be specified along with rrdata within this item.',
    )
    kind: Optional[str] = 'dns#rRSetRoutingPolicyGeoPolicyGeoPolicyItem'
    location: Optional[str] = Field(
        None,
        description='The geo-location granularity is a GCP region. This location string should correspond to a GCP region. e.g. "us-east1", "southamerica-east1", "asia-east1", etc.',
    )
    rrdatas: Optional[List[str]] = None
    signatureRrdatas: Optional[List[str]] = Field(
        None,
        description="DNSSEC generated signatures for all the rrdata within this item. Note that if health checked targets are provided for DNSSEC enabled zones, there's a restriction of 1 ip per item. .",
    )


class RRSetRoutingPolicyWrrPolicy(BaseModel):
    items: Optional[List[RRSetRoutingPolicyWrrPolicyWrrPolicyItem]] = None
    kind: Optional[str] = 'dns#rRSetRoutingPolicyWrrPolicy'


class ResponsePoliciesListResponse(BaseModel):
    header: Optional[ResponseHeader] = None
    nextPageToken: Optional[str] = Field(
        None,
        description='The presence of this field indicates that more results exist following your last page of results in pagination order. To fetch them, make another list request by using this value as your page token. This lets you view the complete contents of even very large collections one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. You cannot retrieve a consistent snapshot of a collection larger than the maximum page size.',
    )
    responsePolicies: Optional[List[ResponsePolicy]] = Field(
        None, description='The Response Policy resources.'
    )


class ResponsePoliciesPatchResponse(BaseModel):
    header: Optional[ResponseHeader] = None
    responsePolicy: Optional[ResponsePolicy] = None


class ResponsePoliciesUpdateResponse(BaseModel):
    header: Optional[ResponseHeader] = None
    responsePolicy: Optional[ResponsePolicy] = None


class Operation(BaseModel):
    dnsKeyContext: Optional[OperationDnsKeyContext] = Field(
        None,
        description='Only populated if the operation targeted a DnsKey (output only).',
    )
    id: Optional[str] = Field(
        None,
        description='Unique identifier for the resource. This is the client_operation_id if the client specified it when the mutation was initiated, otherwise, it is generated by the server. The name must be 1-63 characters long and match the regular expression [-a-z0-9]? (output only)',
    )
    kind: Optional[str] = 'dns#operation'
    startTime: Optional[str] = Field(
        None,
        description='The time that this operation was started by the server. This is in RFC3339 text format (output only).',
    )
    status: Optional[Status] = Field(
        None,
        description='Status of the operation. Can be one of the following: "PENDING" or "DONE" (output only). A status of "DONE" means that the request to update the authoritative servers has been sent, but the servers might not be updated yet.',
    )
    type: Optional[str] = Field(
        None,
        description='Type of the operation. Operations include insert, update, and delete (output only).',
    )
    user: Optional[str] = Field(
        None,
        description='User who requested the operation, for example: user@example.com. cloud-dns-system for operations automatically done by the system. (output only)',
    )
    zoneContext: Optional[OperationManagedZoneContext] = Field(
        None,
        description='Only populated if the operation targeted a ManagedZone (output only).',
    )


class PoliciesListResponse(BaseModel):
    header: Optional[ResponseHeader] = None
    kind: Optional[str] = Field(
        'dns#policiesListResponse', description='Type of resource.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value as your page token. This lets you the complete contents of even very large collections one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. You cannot retrieve a consistent snapshot of a collection larger than the maximum page size.',
    )
    policies: Optional[List[Policy]] = Field(None, description='The policy resources.')


class PoliciesPatchResponse(BaseModel):
    header: Optional[ResponseHeader] = None
    policy: Optional[Policy] = None


class PoliciesUpdateResponse(BaseModel):
    header: Optional[ResponseHeader] = None
    policy: Optional[Policy] = None


class RRSetRoutingPolicyGeoPolicy(BaseModel):
    enableFencing: Optional[bool] = Field(
        None,
        description="Without fencing, if health check fails for all configured items in the current geo bucket, we'll failover to the next nearest geo bucket. With fencing, if health check is enabled, as long as some targets in the current geo bucket are healthy, we'll return only the healthy targets. However, if they're all unhealthy, we won't failover to the next nearest bucket, we'll simply return all the items in the current bucket even though they're unhealthy.",
    )
    items: Optional[List[RRSetRoutingPolicyGeoPolicyGeoPolicyItem]] = Field(
        None,
        description='The primary geo routing configuration. If there are multiple items with the same location, an error is returned instead.',
    )
    kind: Optional[str] = 'dns#rRSetRoutingPolicyGeoPolicy'


class RRSetRoutingPolicyPrimaryBackupPolicy(BaseModel):
    backupGeoTargets: Optional[RRSetRoutingPolicyGeoPolicy] = Field(
        None,
        description='Backup targets provide a regional failover policy for the otherwise global primary targets. If serving state is set to BACKUP, this policy essentially becomes a geo routing policy.',
    )
    kind: Optional[str] = 'dns#rRSetRoutingPolicyPrimaryBackupPolicy'
    primaryTargets: Optional[RRSetRoutingPolicyHealthCheckTargets] = None
    trickleTraffic: Optional[float] = Field(
        None,
        description='When serving state is PRIMARY, this field provides the option of sending a small percentage of the traffic to the backup targets.',
    )


class ManagedZoneOperationsListResponse(BaseModel):
    header: Optional[ResponseHeader] = None
    kind: Optional[str] = 'dns#managedZoneOperationsListResponse'
    nextPageToken: Optional[str] = Field(
        None,
        description='The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value as your page token. This lets you retrieve the complete contents of even very large collections one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. You cannot retrieve a consistent snapshot of a collection larger than the maximum page size.',
    )
    operations: Optional[List[Operation]] = Field(
        None, description='The operation resources.'
    )


class RRSetRoutingPolicy(BaseModel):
    geo: Optional[RRSetRoutingPolicyGeoPolicy] = None
    kind: Optional[str] = 'dns#rRSetRoutingPolicy'
    primaryBackup: Optional[RRSetRoutingPolicyPrimaryBackupPolicy] = None
    wrr: Optional[RRSetRoutingPolicyWrrPolicy] = None


class ResourceRecordSet(BaseModel):
    kind: Optional[str] = 'dns#resourceRecordSet'
    name: Optional[str] = Field(None, description='For example, www.example.com.')
    routingPolicy: Optional[RRSetRoutingPolicy] = Field(
        None,
        description='Configures dynamic query responses based on geo location of querying user or a weighted round robin based routing policy. A ResourceRecordSet should only have either rrdata (static) or routing_policy (dynamic). An error is returned otherwise.',
    )
    rrdatas: Optional[List[str]] = Field(
        None,
        description='As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1) -- see examples.',
    )
    signatureRrdatas: Optional[List[str]] = Field(
        None, description='As defined in RFC 4034 (section 3.2).'
    )
    ttl: Optional[int] = Field(
        None,
        description='Number of seconds that this ResourceRecordSet can be cached by resolvers.',
    )
    type: Optional[str] = Field(
        None,
        description='The identifier of a supported record type. See the list of Supported DNS record types.',
    )


class ResourceRecordSetsListResponse(BaseModel):
    header: Optional[ResponseHeader] = None
    kind: Optional[str] = Field(
        'dns#resourceRecordSetsListResponse', description='Type of resource.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value as your pagination token. This lets you retrieve complete contents of even larger collections, one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of elements returned are an inconsistent view of the collection. You cannot retrieve a consistent snapshot of a collection larger than the maximum page size.',
    )
    rrsets: Optional[List[ResourceRecordSet]] = Field(
        None, description='The resource record set resources.'
    )


class ResponsePolicyRuleLocalData(BaseModel):
    localDatas: Optional[List[ResourceRecordSet]] = Field(
        None,
        description='All resource record sets for this selector, one per resource record type. The name must match the dns_name.',
    )


class Change(BaseModel):
    additions: Optional[List[ResourceRecordSet]] = Field(
        None, description='Which ResourceRecordSets to add?'
    )
    deletions: Optional[List[ResourceRecordSet]] = Field(
        None,
        description='Which ResourceRecordSets to remove? Must match existing data exactly.',
    )
    id: Optional[str] = Field(
        None,
        description='Unique identifier for the resource; defined by the server (output only).',
    )
    isServing: Optional[bool] = Field(
        None, description='If the DNS queries for the zone will be served.'
    )
    kind: Optional[str] = 'dns#change'
    startTime: Optional[str] = Field(
        None,
        description='The time that this operation was started by the server (output only). This is in RFC3339 text format.',
    )
    status: Optional[Status] = Field(
        None,
        description='Status of the operation (output only). A status of "done" means that the request to update the authoritative servers has been sent, but the servers might not be updated yet.',
    )


class ChangesListResponse(BaseModel):
    changes: Optional[List[Change]] = Field(None, description='The requested changes.')
    header: Optional[ResponseHeader] = None
    kind: Optional[str] = Field(
        'dns#changesListResponse', description='Type of resource.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value as your pagination token. This lets you retrieve the complete contents of even very large collections one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. You cannot retrieve a "snapshot" of collections larger than the maximum page size.',
    )


class ResponsePolicyRule(BaseModel):
    behavior: Optional[Behavior] = Field(
        None, description='Answer this query with a behavior rather than DNS data.'
    )
    dnsName: Optional[str] = Field(
        None,
        description='The DNS name (wildcard or exact) to apply this rule to. Must be unique within the Response Policy Rule.',
    )
    kind: Optional[str] = 'dns#responsePolicyRule'
    localData: Optional[ResponsePolicyRuleLocalData] = Field(
        None,
        description='Answer this query directly with DNS data. These ResourceRecordSets override any other DNS behavior for the matched name; in particular they override private zones, the public internet, and GCP internal DNS. No SOA nor NS types are allowed.',
    )
    ruleName: Optional[str] = Field(
        None,
        description='An identifier for this rule. Must be unique with the ResponsePolicy.',
    )


class ResponsePolicyRulesListResponse(BaseModel):
    header: Optional[ResponseHeader] = None
    nextPageToken: Optional[str] = Field(
        None,
        description='The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value as your page token. This lets you the complete contents of even very large collections one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. You cannot retrieve a consistent snapshot of a collection larger than the maximum page size.',
    )
    responsePolicyRules: Optional[List[ResponsePolicyRule]] = Field(
        None, description='The Response Policy Rule resources.'
    )


class ResponsePolicyRulesPatchResponse(BaseModel):
    header: Optional[ResponseHeader] = None
    responsePolicyRule: Optional[ResponsePolicyRule] = None


class ResponsePolicyRulesUpdateResponse(BaseModel):
    header: Optional[ResponseHeader] = None
    responsePolicyRule: Optional[ResponsePolicyRule] = None
